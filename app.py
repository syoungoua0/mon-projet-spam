import streamlit as st
import joblib
import pickle
import os
import re
import string
from cryptography.fernet import Fernet
import hashlib
import nltk
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
from langdetect import detect, LangDetectException

# T√©l√©chargement des ressources n√©cessaires de nltk
nltk.download('stopwords')
nltk.download('wordnet')
nltk.download('omw-1.4')

# Utilisateurs simul√©s
USERS = {
    "Stephane": {"password": "1234", "role": "data_scientist"},
    "Lionnel": {"password": "5678", "role": "analyst"}
}

# Fonction de nettoyage
def nettoyer_texte(texte):
    texte = texte.lower()
    texte = re.sub(r'http\S+|www\S+', '', texte)
    texte = texte.translate(str.maketrans('', '', string.punctuation))
    tokens = texte.split()
    stop_words = set(stopwords.words('english'))
    tokens = [word for word in tokens if word not in stop_words]
    lemmatizer = WordNetLemmatizer()
    tokens = [lemmatizer.lemmatize(word) for word in tokens]
    return ' '.join(tokens)

# D√©tection de langue
def detecter_langue(texte):
    try:
        return detect(texte)
    except LangDetectException:
        return "unknown"

# Chargement des mod√®les
@st.cache_resource
def load_model_and_vectorizer():
    with open("vectorizer.pkl", "rb") as vfile:
        vectorizer = pickle.load(vfile)
    model = joblib.load("spam_model.joblib")
    return model, vectorizer

@st.cache_resource
def load_fernet():
    if os.path.exists("fernet.key"):
        with open("fernet.key", "rb") as f:
            key = f.read()
        return Fernet(key)
    return None

# Interface utilisateur
st.set_page_config(page_title="D√©tecteur de SMS", page_icon="üì®")
st.title(" Interface s√©curis√©e de classification des SMS")
st.sidebar.header("Connexion utilisateur")

username = st.sidebar.text_input("Nom d'utilisateur")
password = st.sidebar.text_input("Mot de passe", type="password")

authenticated = False
role = None

if username in USERS and USERS[username]["password"] == password:
    authenticated = True
    role = USERS[username]["role"]
    st.sidebar.success(f"Connect√© en tant que {username} ({role})")
else:
    if username and password:
        st.sidebar.error("Identifiants incorrects")

# Interface principale apr√®s authentification
if authenticated:
    model, vectorizer = load_model_and_vectorizer()
    fernet = load_fernet()

    st.subheader(" Analyse d'un SMS")
    sms_input = st.text_area("Entrez le message SMS √† analyser")

    if sms_input:
        langue = detecter_langue(sms_input)
        st.info(f"üåç Langue d√©tect√©e : **{langue}**")

        if langue != "en":
            st.warning("‚ö†Ô∏è Le mod√®le est entra√Æn√© uniquement sur des messages en **anglais**. Les r√©sultats peuvent √™tre incorrects.")
        else:
            clean_text = nettoyer_texte(sms_input)
            vecteur = vectorizer.transform([clean_text])
            prediction = model.predict(vecteur)[0]
            label = "Spam" if prediction == 1 else "Ham"

            if role == "data_scientist":
                st.write("### üî¨ R√©sultat complet")
                st.write(f"Vecteur TF-IDF : {vecteur.toarray()}")
                st.success(f"‚úÖ Pr√©diction : **{label}**")
            elif role == "analyst":
                st.write("### üîé R√©sultat")
                st.success(f"‚úÖ Pr√©diction : **{label}**")
else:
    st.warning("Veuillez vous connecter pour acc√©der √† l'application.")
